#!/usr/bin/env python

##############################################################################
##
## $Id: AppletRun,v 1.19 2003/09/08 19:57:52 riemer Exp $
##
## Copyright (C) 2002 Tilo Riemer <riemer@lincvs.org>
## All rights reserved. 
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions
## are met:
##
## 1. Redistributions of source code must retain the above copyright
##    notice, this list of conditions and the following disclaimer.
## 2. Redistributions in binary form must reproduce the above copyright
##    notice, this list of conditions and the following disclaimer in the
##    documentation and/or other materials provided with the distribution.
## 3. The name of the author may not be used to endorse or promote products
##    derived from this software without specific prior written permission. 
##
## THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
## IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
## OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
## IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
## INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
## NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
## DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
## THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
## (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
## THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##
###############################################################################


import findrox
import rox
from rox import g
import sys
from rox import applet
import time, string, os


#intervall which is used for updating apm info... (milliseconds)
CHECK_INTERVALL = 10000

#opens a message box if percentage battery capacity is less than WARN_LEVEL
WARN_LEVEL = 20   #warn if battery capacity is less or equal than WARN_LEVEL

#use ACPI or APM
TYPE_ACPI = 0
TYPE_APM  = 1


type = TYPE_ACPI

cur_warn_level = 0
cur_default_warn_level = 0
app_dir = ""


#init display
battery_display = g.Label("")
battery_display.set_justify(g.JUSTIFY_RIGHT)



def update_display(battery):
	global cur_warn_level
	global cur_default_warn_level
	global app_dir
	global type
	global battery_display

	if type == TYPE_ACPI:
		try:	
			battery.update()
		except AcpiError:
			#TODO: handling of exception
			pass
	else:		
		battery.update()
			
	percent = battery.percent()
	percent_str = str(percent) + "%"

	if type == TYPE_ACPI:
		cap_time_str = str(battery.capacity()) + " mAh"
		offline_state = acpi.OFFLINE 
	else:
		hours = battery.time() / 60
		mins  = battery.time() % 60
		cap_time_str = str(hours) + ":%(mins)02d" % vars()
		offline_state = apm.OFFLINE 

	txt = percent_str + "\n" + cap_time_str
	battery_display.set_text(txt)

	if battery.charging_state() == offline_state:
		if percent <= cur_warn_level:
			cur_warn_level = percent
			os.system(app_dir + "/alert.py " + str(cur_warn_level) + "&")
			cur_warn_level = cur_warn_level * 2 / 3	 #decrease warn level
	else:
		cur_warn_level = cur_default_warn_level
	
	return 1
	

#check run mode (applet or normal application?)
if len(sys.argv) > 1:
	main = applet.Applet(sys.argv[1])
else:
	main = rox.Window()


#hack?
app_dir = sys.argv[0].split("AppletRun")[0]


try:
	import acpi
	battery = acpi.Acpi()
	type = TYPE_ACPI
except ImportError:
	#no ACPI module found -> try APM
	try:
		import apm
		battery = apm.Apm()
		type = TYPE_APM
	except ImportError:
		#no APM module found -> exit
		error_msg = "Neither APCI nor APM module found.\n"
		error_msg = error_msg + "Install one of these modules (see http://www.iapp.de/~riemer/projects/apm.py)"
		sys.exit(error_msg)
		


cur_warn_level = WARN_LEVEL
cur_default_warn_level = WARN_LEVEL


update_display(battery)

	
main.set_border_width(6)
main.add(battery_display)
main.show_all()

g.timeout_add(CHECK_INTERVALL, update_display, battery)

rox.mainloop()
