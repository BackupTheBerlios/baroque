#!/usr/bin/env python

##############################################################################
##
## $Id: AppletRun,v 1.12 2002/12/09 01:28:28 riemer Exp $
##
## Copyright (C) 2002 Tilo Riemer <riemer@lincvs.org>
## All rights reserved. 
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions
## are met:
##
## 1. Redistributions of source code must retain the above copyright
##    notice, this list of conditions and the following disclaimer.
## 2. Redistributions in binary form must reproduce the above copyright
##    notice, this list of conditions and the following disclaimer in the
##    documentation and/or other materials provided with the distribution.
## 3. The name of the author may not be used to endorse or promote products
##    derived from this software without specific prior written permission. 
##
## THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
## IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
## OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
## IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
## INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
## NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
## DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
## THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
## (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
## THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##
###############################################################################


import findrox
import rox
from rox import g
import sys
from rox import applet
import time, string, os


#intervall which is used for calling apm... (milliseconds)
CHECK_INTERVALL = 10000

#which operating system?
FreeBSD = 1
Linux   = 0


cur_warn_level = 0
app_dir = ""


def check_system():
	res = sys.platform
	if res.find("freebsd") > -1:
		return FreeBSD
	else:
		return Linux
		
		
def update_display(battery):
	global cur_warn_level
	global app_dir
	
	battery.update()
	
	txt = str(battery.percent()) + "%\n" + str(battery.capacity()) + " mAh"
	apm_display.set_text(txt)

	if battery.charging_state() == bq_consts.OFFLINE:
		if (battery.percent() <= cur_warn_level):
			os.system(app_dir + "/alert.py " + str(battery.percent()) + "&")
			cur_warn_level = cur_warn_level * 2 / 3	 #decrease warn level

	return 1
	

#check run mode (applet or normal application?)
if len(sys.argv) > 1:
	main = applet.Applet(sys.argv[1])
else:
	main = rox.Window()


#init display
apm_display = g.Label("")
apm_display.set_justify(g.JUSTIFY_RIGHT)


#check system (FreeBSD or other)
system = check_system()

#hack?
app_dir = sys.argv[0].split("AppletRun")[0]

#add consts path
sys.path.append(app_dir + "/Modules")


#append system dependent path to module path
if system == FreeBSD:
	pass
else:
	sys.path.append(app_dir + "/Modules/Linux")

import bq_consts, bq_acpi

cur_warn_level = bq_consts.WARN_LEVEL

battery = bq_acpi.CAcpi()
if battery.nb_of_batteries() < 1:
	#no ACPI? ... fallback to APM
	battery = bq_apm.CApm()


update_display(battery)


	
main.set_border_width(6)
main.add(apm_display)
main.show_all()

g.timeout_add(CHECK_INTERVALL, update_display, battery)


rox.mainloop()


















#~ apm_cmd_freebsd = "/usr/sbin/apm"
#~ apm_cmd_generic = "apm"



#~ def check_capacity(cap):
#~ #check for capacity and opens a message box if capacity is too less
#~ #the code is a little bit obscure
	#~ global alert_state
	#~ global cur_warn_level

	#~ cap_val = int(cap.split("%")[0])

	#~ if alert_state == 0:
		#~ if (cap_val < cur_warn_level) and (ac_line_state == OFFLINE):
			#~ alert_state = 1
			#~ msg = 'The capacity of battery is less than ' + str(cur_warn_level) + "%"
			#~ rox.alert(msg)
			#~ alert_state = 2
			#~ cur_warn_level = cur_warn_level * 2 / 3	 #decrease warn level
	#~ elif alert_state == 2:
		#~ alert_state = 0
			
	#~ g.timeout_add(CHECK_INTERVALL, update_apm)


#~ def update_apm_freebsd():
	#~ global ac_line_state
	
	#~ percent_sum_found = 0
	#~ time_sum_found    = 0
	
	#~ life_percent = "0%"
	#~ life_time    = "00:00"

	#~ #we reset LC_ALL because we need the english output from apm
	#~ res = commands.getoutput("env LC_ALL=C " + apm_cmd_freebsd)
	#~ lines = res.split("\n")
	#~ for i in lines:
		#~ if not percent_sum_found and (i.find("battery life") > 0):
			#~ percent_sum_found = 1
			#~ life_res = i.split(":")
			#~ life_percent = life_res[1]
			
		#~ if not time_sum_found and (i.find("battery time") > 0):
			#~ time_sum_found = 1
			#~ life_res = i.split(": ")
			#~ life_res2 = life_res[1].split(":")
			#~ life_time = life_res2[0] + ":" + life_res2[1]

		#~ if i.find("off-line") > 0:
			#~ ac_line_state  = OFFLINE
		#~ elif i.find("on-line") > 0:
			#~ cur_warn_level = WARN_LEVEL
			#~ ac_line_state  = ONLINE


	#~ apm_display.set_text(life_percent + "\n" + life_time)
	
	#~ check_capacity(life_percent)
	
	#~ return 1



#~ def update_apm_linux():
	#~ global ac_line_state

	#~ life_percent = "0%"
	#~ life_time    = "00:00"

	#~ #we reset LC_ALL because we need the english output from apm
	#~ res = commands.getoutput("env LC_ALL=C " + apm_cmd_generic)
	#~ #res = "AC off-line, battery status high: 100% (3:20)\n"
	
	#~ lines = res.split("\n")

	#~ #we assume all info in the first (the one and only) line
	#~ if lines[0].find("off-line") > 0:
		#~ ac_line_state = OFFLINE
	#~ else:
		#~ cur_warn_level = WARN_LEVEL
		#~ ac_line_state = ONLINE
		

	#~ #if lines[0].find("charging") > 0:
		#~ #print "charging"

	#~ items = lines[0].split()

	#~ for i in items:
		#~ if i.find("%") > 0:
			#~ life_percent = i
	
		#~ if (i.find("(") > -1) and (i.find(":") > 0) and (i.find(")") > 0):
			#~ life_time = i.split("(")[1].split(")")[0]
		
	#~ apm_display.set_text(life_percent + "\n" + life_time)
	
	#~ check_capacity(life_percent)
	
	#~ return 1



#~ def update_apm():
#~ #calls system dependent update funcs
	#~ if system == FreeBSD:
		#~ update_apm_freebsd()
	#~ else:
		#~ update_apm_linux()
		



